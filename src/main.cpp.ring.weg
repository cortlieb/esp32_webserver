#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include "../include/colors.h"

#define LED_RING_KL_PIN 2
#define LED_RING_GR_PIN 0
#define LED_RING_KL_COUNT 8
#define LED_RING_GR_COUNT 24

#define DELAY 60

void runningCircle(uint32_t color, int wait);
void runningCircleSingle(uint32_t color, uint32_t backgroundColor, int wait);
void runningCircleSingle2(uint32_t color, uint32_t backgroundColor, int wait);

Adafruit_NeoPixel ringKlein(LED_RING_KL_COUNT, LED_RING_KL_PIN, NEO_GRB + NEO_KHZ800);
Adafruit_NeoPixel ringGross(LED_RING_GR_COUNT, LED_RING_GR_PIN, NEO_GRB + NEO_KHZ800);

void setup()
{
	Serial.begin(115200); /* prepare for possible serial debug */

	ringKlein.begin();
	ringKlein.show();
	ringKlein.setBrightness(64);

	ringGross.begin();
	ringGross.show();
	ringGross.setBrightness(64);

	Serial.println("Setup done");
}
void loop()
{
	// runningCircle(RED, DELAY);
	// runningCircle(GREEN, DELAY);
	// runningCircle(BLUE, DELAY);
	// runningCircle(WHITE, DELAY);

	runningCircleSingle(RED, BLACK, DELAY);
	runningCircleSingle2(RED, BLACK, DELAY);
	runningCircleSingle(GREEN, BLACK, DELAY);
	runningCircleSingle2(GREEN, BLACK, DELAY);
	runningCircleSingle(BLUE, BLACK, DELAY);
	runningCircleSingle2(BLUE, BLACK, DELAY);
	runningCircleSingle(WHITE, BLACK, DELAY);
	runningCircleSingle2(WHITE, BLACK, DELAY);

	// // for (i = 0; i < ring.numPixels(); i++)
	// // {
	// // 	// ring.clear();
	// // 	ring.fill(WHITE);
	// // 	Serial.println(i);
	// // 	ring.setPixelColor(i, RED);
	// // 	// ring.setPixelColor(i, random(0x0A0A0A, 0xFFFFFF));
	// // 	ring.show();
	// // 	delay(250);
	// // }
	// ring.fill(WHITE);
	// ring.setPixelColor(0, RED);
	// ring.show();
	// delay(DELAY);
	// ring.fill(WHITE);
	// ring.setPixelColor(0, PINK);
	// ring.setPixelColor(1, PINK);
	// ring.show();
	// delay(DELAY);

	// ring.fill(WHITE);
	// ring.setPixelColor(1, RED);
	// ring.show();
	// delay(DELAY);
	// ring.fill(WHITE);
	// ring.setPixelColor(1, PINK);
	// ring.setPixelColor(2, PINK);
	// ring.show();
	// delay(DELAY);

	// ring.fill(WHITE);
	// ring.setPixelColor(2, RED);
	// ring.show();
	// delay(DELAY);
	// ring.fill(WHITE);
	// ring.setPixelColor(2, PINK);
	// ring.setPixelColor(3, PINK);
	// ring.show();
	// delay(DELAY);

	// ring.fill(WHITE);
	// ring.setPixelColor(3, RED);
	// ring.show();
	// delay(DELAY);
	// ring.fill(WHITE);
	// ring.setPixelColor(3, PINK);
	// ring.setPixelColor(4, PINK);
	// ring.show();
	// delay(DELAY);

	// ring.fill(WHITE);
	// ring.setPixelColor(4, RED);
	// ring.show();
	// delay(DELAY);
	// ring.fill(WHITE);
	// ring.setPixelColor(4, PINK);
	// ring.setPixelColor(5, PINK);
	// ring.show();
	// delay(DELAY);

	// ring.fill(WHITE);
	// ring.setPixelColor(5, RED);
	// ring.show();
	// delay(DELAY);
	// ring.fill(WHITE);
	// ring.setPixelColor(5, PINK);
	// ring.setPixelColor(6, PINK);
	// ring.show();
	// delay(DELAY);

	// ring.fill(WHITE);
	// ring.setPixelColor(6, RED);
	// ring.show();
	// delay(DELAY);
	// ring.fill(WHITE);
	// ring.setPixelColor(6, PINK);
	// ring.setPixelColor(7, PINK);
	// ring.show();
	// delay(DELAY);

	// ring.fill(WHITE);
	// ring.setPixelColor(7, RED);
	// ring.show();
	// delay(DELAY);

	// ring.clear();
	// ring.setPixelColor(2, GREEN);
	// ring.setPixelColor(4, GREEN);
	// ring.setPixelColor(6, GREEN);
	// ring.setPixelColor(0, GREEN);
	// ring.show();
	// delay(1000);

	// ring.fill(WHITE);
	// ring.setPixelColor(7, PINK);
	// ring.setPixelColor(0, PINK);
	// ring.show();
	// delay(DELAY);
}

void runningCircle(uint32_t color, int wait)
{
	for (int i = 0; i < LED_RING_KL_COUNT; i++)
	{
		ringKlein.setPixelColor(i, color);
		ringKlein.show();
		delay(wait);
	}
}

void runningCircleSingle(uint32_t color, uint32_t backgroundColor, int wait)
{
	for (int i = 0; i < LED_RING_KL_COUNT; i++)
	{
		ringKlein.fill(backgroundColor);
		ringKlein.setPixelColor(i, color);
		ringKlein.show();
		delay(wait);
	}
}

void runningCircleSingle2(uint32_t color, uint32_t backgroundColor, int wait)
{
	for (int i = 0; i < LED_RING_GR_COUNT; i++)
	{
		ringGross.fill(backgroundColor);
		ringGross.setPixelColor(i, color);
		ringGross.show();
		delay(wait);
	}
}
